Recognizing regular patterns in mixed-type sequences using a Simple Embedded Type System

Abstract: 

We present a technique for recognizing regular patterns in mixed-type
sequences.  The work is based on PhD Thesis, Representing and
computing with types in dynamically typed languages,
https://theses.hal.science/tel-03018107v1 which was conceived to add
regular type expressions (RTEs) to Common Lisp, but has now been
generalized and also implemented in Scala, Clojure, and Python.

The implementations are publically available at 
  https://github.com/jimka2001/clojure-rte
  https://github.com/jimka2001/cl-rte
  https://github.com/jimka2001/python-rte
  https://github.com/jimka2001/scala-rte

We assume the audience to already be familiar with string-based
regular expressions (REs). REs are used to distinguish strings which
follow a regular pattern such as $a(a|b)^*b$, the set of strings
beginning with the character a, ending with b, and with zero or more a
or b (or both) characters falling in between. We generalize this
familiar concept to define expressions which specify a sequence
beginning with an integer, ending with a string, and with zero or more
integers or strings (or both) falling in between.

Sequences are recognized by converted a so called RTE (regular type
expression) to a symbolic finite automaton whose transitions are
labeled by type designators.  In order to support intersection, union,
complement, and predicate types, a complemented type lattice must be
embedded into the host language.

The implementation of RTEs involved several challenges.

1) Embed a Simple type system (SETS) into the host language--adding
intersection, union, and complement types, as well an singleton and
predicate types.

2) Define an s-expression syntax for defining regular-type-expression
in terms of types, including intersections, unions, and complements.

3) Construct deterministic finite automata, DFAs, from the regular
type expressions. This library manipulates DFAs with operations such
as minimize, intersection, union, xor, and extract-rte.  The run-time
flow consists of:

There are many theoretical questions which investigate the limitations
of the generalization from classical character based regular
expressions to regular type expressions. Some of these concerns
include habitation and vacuity checks (given an RTE, can we determine
whether all or no sequence will match). Given two types designators
determine whether one is a subtype of the other, and whether either is
empty. Subtype determination is important for guaranteeing that finite
automata be deterministic. Unfortunately, the subtype relation cannot
always be determined (for several interesting theoretical reasons). We
present a clever procedure for DFA construction which is guaranteed to
be deterministic, even when the subtype relation cannot be determined.


Bio: Jim Newton is an assistant research professor at EPITA, Kremlin
Bicetre, FRANCE, where he occasionally teaches courses in functional
programming using Clojure and Scala.  Jim has been a Lisp programmer
since 1988, and has used various lisp dialects such as Common
Lisp, SKILL++ (a Scheme dialect), elisp, and most recently, Clojure.
